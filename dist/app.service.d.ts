import { Server } from 'socket.io';
import { AuditoriesService } from './auditories/auditories.service';
import { BankrollService } from './bankroll/bankroll.service';
import { User } from './auth/auth.interface';
import { BetsService } from './bets/bets.service';
import { FundsManagerService } from './funds-manager/funds-manager.service';
import { ExitRoundRequest, PlaceBetRequest } from './interfaces/bets.interface';
import { AcceptedBet } from './models/bets.model';
import { GameData, IGame, State } from './models/game.model';
export declare class AppService {
    private readonly betsService;
    private readonly auditoriesService;
    private readonly fundsManagerService;
    private readonly bankrollService;
    countdown: number;
    acceptedBets: AcceptedBet[];
    private game;
    private server;
    private logger;
    constructor(betsService: BetsService, auditoriesService: AuditoriesService, fundsManagerService: FundsManagerService, bankrollService: BankrollService);
    setServer(server: Server): void;
    getServer(): Server;
    setCurrentGameState(state: State, data: GameData): void;
    getCurrentGameState(): IGame;
    validateSingleBet(address: string): void;
    private validateExit;
    handleGameCrash(): void;
    private acceptBet;
    private dispatchFundManagerOperation;
    handlePlaceBet(bet: PlaceBetRequest, user: User): Promise<AcceptedBet>;
    handleExitRound(exitRequest: ExitRoundRequest, user: User): Promise<AcceptedBet>;
    sendExitBatchToFundsManager(exits: AcceptedBet[]): Promise<void>;
    handleBatchExitsForTargetAndMaxMultiplier(currentMultiplier: number): Promise<void>;
    handleJackpot(): void;
    startCountdown(): void;
}
